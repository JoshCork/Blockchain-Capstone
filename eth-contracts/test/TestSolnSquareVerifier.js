// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
let SolnSquareVerifier = artifacts.require('SolnSquareVerifier');
var p   = require(__dirname + '/../test/proof.json').proof;
var i   = require(__dirname + '/../test/proof.json').inputs;
var ni  = require(__dirname + '/../test/negativeProof.json').inputs;

contract('TestSolnSquareVerifier', accounts => {

    const account_one   = accounts[0];
    const account_two   = accounts[1];

    describe('Testing integration of verifier and custom token', function () {
        beforeEach(async function () {
            this.contract = await SolnSquareVerifier.new({from: account_one});
        })

        // Test if a new solution can be added for contract - SolnSquareVerifier
        it('a new correct solution can be added', async function () {

            try {
                await this.contract.testFunction.call();
            } catch(e) {
                console.log(e);
            }

            // let actual = await this.contract.addSolution.call(p.a, p.b, p.c,i,account_two); // token should now be minted
            // console.log(`actual: ${JSON.stringify(actual)}`);

            // let expected = true;
            assert.equal(true, false, "Verifier failed.");
        });
    });

});



// Test if an ERC721 token can be minted for contract - SolnSquareVerifier
